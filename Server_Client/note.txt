// GSP 참조

// 서버 구동의 큰 흐름
// 1. WSAStartup
WSADATA wsa;
if (WSAStartup(MAKEWORD(2, 2), &wsa) != 0)
    return false;

// 2. WSASocket, ListenSocket 배정 (TCP 소켓 생성)
mListenSocket = WSASocket(AF_INET, SOCK_STREAM, IPPROTO_TCP, NULL, 0, WSA_FLAG_OVERLAPPED);
if (mListenSocket == INVALID_SOCKET)
    return false;

// 3. setsockopt, 소켓의 옵션을 설정
// SO_REUSEADDR : 소켓을 재사용 할 수 있도록 함
int opt = 1;
setsockopt(mListenSocket, SOL_SOCKET, SO_REUSEADDR, (const char*)&opt, sizeof(int));

// 4. Bind, 소켓에 ip, port 등 필요한 정보를 배정함
// 해당 정보들은 SOCKADDR_IN 구조체에 넣는다
SOCKADDR_IN serveraddr;
ZeroMemory(&serveraddr, sizeof(serveraddr));
serveraddr.sin_family = AF_INET;
serveraddr.sin_port = htons(LISTEN_PORT);
serveraddr.sin_addr.s_addr = htonl(INADDR_ANY);

if (SOCKET_ERROR == bind(mListenSocket, (SOCKADDR*)&serveraddr, sizeof(serveraddr)))
    return false;

// 5. Listen
if (SOCKET_ERROR == listen(mListenSocket, SOMAXCONN))
{
    printf_s("[DEBUG] listen error\n");
    return;
}


// IOCP 를 위한 사전 작업
// 1. IOCP 에 사용할 스레드 갯수 설정
SYSTEM_INFO si;
GetSystemInfo(&si);
mIoThreadCount = si.dwNumberOfProcessors;

// 2. IOCP 핸들 생성
mCompletionPort = CreateIoCompletionPort(INVALID_HANDLE_VALUE, NULL, 0, 0);
if (mCompletionPort == NULL)
    return false;

// 3. 기존 파일에 IOCP 핸들을 연결
// 완료 통지를 위한걸로 보임
HANDLE handle = CreateIoCompletionPort((HANDLE)mListenSocket, mCompletionPort, 0, 0);

// 4. IOCP 스레드 생성
// IOCP 스레드에 사용할 함수를 꼭 만들어둘 것
for (int i = 0; i < mIoThreadCount; ++i)
{
    DWORD dwThreadId;
    HANDLE hThread = (HANDLE)_beginthreadex(NULL, 0, IoWorkerThread, (LPVOID)(i+1), 0, (unsigned int*)&dwThreadId);
    if (hThread == NULL)
        return false;
}

/*------------------------ 180322 ------------------------*/
// AcceptEx
// 비동기적 소켓 연결을 위한 함수
// 사용하기 위해, mswsock.h 의 AcceptEx 함수를 런타임 중 메모리에 등록해야 한다
// DisconnectEx 도 같은 방법으로 등록하고 사용한다.

// 1. LPFN_ACCEPTEX 와 GUID 등록
LPFN_ACCEPTEX IocpManager::lpfnAcceptEx = nullptr;
GUID guidAcceptEx = WSAID_ACCEPTEX;

// 2. WSAIoctl 함수를 통해 런타임 중 메모리에 함수 등록
DWORD bytes = 0;
WSAIoctl(   listenSock,                         // 소켓
            SIO_GET_EXTENSION_FUNCTION_POINTER, // 컨트롤 코드
            &guidAcceptEx,                      // 입력버퍼
            SIZEOF(GUID),                       // 입력버퍼 크기
            &lpfnAcceptEx,                      // 출력버퍼, 나중에 AcceptEx 의 함수포인터로 동작함
            SIZEOF(LPFN_ACCEPTEX),              // 출력버퍼 크기
            &bytes,                             // 반환값 크기
            NULL,                               // WSAOVERLAPPED 포인터, NULL 일경우 non-overlapped 소켓으로 취급
            NULL                                // Completion Routine 포인터, NULL 일경우 non-overlapped 소켓으로 취급
            );

// 3. WSAIoctl 로 받은 AcceptEx 의 함수포인터를 적당히 사용한다
IocpManager::lpfnAcceptEx(/* ... */);
BOOL IocpManager::AcceptEx(/*...*/)
{
    return IocpManager::lpfnAcceptEx(/*...*/);
}

// AcceptEx 의 매개변수
BOOL AcceptEx(SOCKET sListenSocket,         // 서버 소켓
              SOCKET sAcceptSocket,         // 클라이언트 소켓, bind/connect 되면 안됨
              PVOID lpOutputBuffer,         // local 주소, remote 주소, 연결시 받을 첫 데이터 블록의 내용을 저장할 버퍼
              DWORD dwReceiceDataLength,    // 버퍼에 저장되는 데이터 블록의 크기 
              DWORD dwLocalAddressLength,   // local 주소의 길이
              DWORD dwRemoteAddressLength,  // remote 주소의 길이
              LPDWORD lpdwBytesReceived,    // 완료시 전달할 overlapped 구조체의 주소
              LPOVERLAPPED lpOverlapped     // Overlapped 구조체의 포인터, NULL은 안됨
              );

// DisconnectEx 의 매개변수
BOOL DisconnectEx(SOCKET hSocket,               // 연결되어 있는 클라이언트 소켓
                  LPOVERLAPPED lpOverlapped,    // OVERLAPPED 구조체의 포인터, NULL 이면 안됨
                  DWORD dwFlags,                // 소켓 사용에 대한 플래그
                  DWORD reserved                // 무조건 0을 전달
                  );

// 특이사항
// dwFlags : TF_REUSE_SOCKET 을 전달해서 AcceptEx, ConnectEx 에서 사용한 소켓을 재사용할 수 있다
// reserved : 0이 아닌 다른 값을 전달하면 WSAEINVAL 오류를 반환함

// IOCP Thread 에서 진행되는 작업
// 1. 필요한 변수 선언
LIoThreadId = reinterpret_cast<int>(lpParam);
HANDLE hComletionPort = GIocpManager->GetComletionPort();

// 2. GQCS 를 이용해 Completion Queue 에서 작업할 것을 꺼내오기
while(true)
{
    int ret = GetQueuedCompletionStatus(hComletionPort,
                                        &dwTransferred,
                                        (PULONG_PTR)&completionKey,
                                        (LPOVERLAPPED*)&context,
                                        GQCS_TIMEOUT);
}

// 3. GQCS 로 불러온 작업에 대한 에러 검증
if (ret == 0 || dwTransferred == 0)
{
    int gle = GetLastError();

    /// check time out first 
    if (gle == WAIT_TIMEOUT)
        continue;

    // IO_RECV, IO_SEND 인데 받은 byte가 없거나 GQCS 에서 에러를 보낸 경우
    if (context->mIoType == IO_RECV || context->mIoType == IO_SEND )
    {
        CRASH_ASSERT(nullptr != theClient);

        /// In most cases in here: ERROR_NETNAME_DELETED(64)
        theClient->DisconnectRequest(DR_COMPLETION_ERROR);
        DeleteIoContext(context);
        continue;
    }
}

// 4. 소켓의 종류에 따라 처리하기
switch (context->mIoType)
{
case IO_DISCONNECT:
    break;
    /* ... */
default:
    break;
}

// 5. 필요할 경우 추가적인 에러 처리를 하기


// 내 서버만의 Overlapped 구조체 정의하기
struct OverlappedIOContext
{
	OverlappedIOContext(ClientSession* owner, IOType ioType);

	OVERLAPPED		mOverlapped ;       // 당연히 있어야하는 Overlapped 구조체
	ClientSession*	mSessionObject ;    // 클라이언트를 구분하기 위한 변수
	IOType			mIoType ;           // 패킷의 종류를 구분할 IO Type
	WSABUF			mWsaBuf;            // WSABUF
} ;


// 패킷 종류를 구분해보자
// 의문점 하나
// Q) GSP 에서는 ClientSession.h 에 정의했는데, 굳이 그럴 필요가 있을까?
// A) 의미가 없었다, 새로 정의할 Overlapped 구조체에 클라이언트 구분에 사용할
// ClientSession 객체의 포인터 값이 들어가더라.
// 그렇게 구성하지 않을 생각이라면 ClientSession.h 에 정의할 필요가 없어보인다

// 패킷의 1차 분류, 연결 혹은 오브젝트 패킷인지 구분한다
enum PACKET_TYPE
{
    CONNECTION,
    OBJECT_MODIFY
}

// 패킷의 2차 분류, 어떤 연결 이벤트인지 구분한다
enum CONNECTION_EVENT
{
    CONNECTION,
    DISCONNECT_USER,
    DISCONNECTION_FORCED
}

// 패킷의 2차 분류, 어떤 오브젝트 이벤트인지 구분한다
enum OBJECT_EVENT
{
    OBJECT_CREATE,
    OBJECT_MOVE,
    OBJECT_COLLISION,
    OBJECT_DELETE
}


/*------------------------ 180325 ------------------------*/

// WSABUF 와 내 패킷 구조에 대한 고찰
// 1. WSASend/Recv 의 매개변수
// 매개변수 중 WSABUF 구조체를 받는 부분이 있더라.
// 있는건 좋은데, 지금까지 찾아본 바로는 WSABUF 외의 다른 것을 넣을 상황은 안되는 것 같음.
// 다른 함수를 사용할 수 있다면 좋겠지만, 그걸 찾아볼 시간이 있을리가?


// 2. WSABUF 의 구조
typedef struct __WSABUF {
  u_long   len;
  char FAR *buf;
} WSABUF, *LPWSABUF;
// char FAR *buf 에서 FAR 이 뭘 의미하는지는 모르겠다
// 다만 MSDN 에 따르면 그냥 char* buf 라고 해석해도 상관없을듯

// 3. 결론?
// 내 구조체를 char* 로 강제 형변환해서 넘겨버리면 괜찮을까?
// 이게 가능하다면 기존의 잘 구성된 서버 예제를 가지고 손쉽게 패킷을
// 주고 받을 수 있을거라고 예상된다

// 각종 구조들
struct GameObject
{
    unsigned int    id;             // 오브젝트의 id, 오브젝트 리스트에서 해당 오브젝트를 구분할 때 사용한다
    float           xpos;           // 오브젝트의 x, y 좌표 값
    float           ypos;
    short           side;           // 오브젝트가 어느 플레이어 소속인지 확인
    short           pattern;        // 오브젝트가 총알이면, 어떤 패턴으로 행동하는지 정함
    unsigned short  estimate_time;  // 만약 오브젝트가 제한된 시간동안 존재할 경우, 그 시간을 정하는 변수
    unsigned short  life;           // 오브젝트가 체력을 갖고 있을 경우, 그 체력을 정하는 변수
    bool            is_active;      // 오브젝트가 활성 상태로 게임에 존재하는지 정하는 변수
};

struct PacketModifyObject
{
    EVENT_TYPE      eType;      // 오브젝트 이벤트 타입
    unsigned int    id_main;    // 오브젝트 이벤트의 주체
    unsigned int    id_sub;     // 상호작용인 경우 그 대상 오브젝트
    float           xpos;       // 이벤트 x, y 좌표
    float           ypos;
};

struct PacketConnectionInfo
{
    CONNECTION_INFORMATION ciType;  // CI 정보
    char    userid[32];             // uid 번호
    short   side;                   // 유저가 플레이할 팀
    short   pattern1;               // 유저가 선택한 특수공격 1~3
    short   pattern2;
    short   pattern3;
};


/*------------------------ 180331 ------------------------*/

// 대체 completionOk 가 만들어내는 차이는 뭔가?
// 크게 두 가지로 분류할 수 있다
// completionOk == true 인 IO_ACCEPT, IO_DISCONNECT
// completionOk == false 인 IO_SEND, IO_RECV 등등.

bool completionOk = false;
switch (context->mIoType)
{
case IO_DISCONNECT:
    theClient->DisconnectCompletion(static_cast<OverlappedDisconnectContext*>(context)->mDisconnectReason);
    completionOk = true;
    break;

case IO_RECV_ZERO:
    completionOk = PreReceiveCompletion(theClient, static_cast<OverlappedPreRecvContext*>(context), dwTransferred);
    break;
}

// completionOk == true 인 두 IO Type 은 socket 을 재활용할 필요가 없는 동작이다
// 반대의 경우에는 socket 을 재활용할 이유가 있는 동작이더라

if ( !completionOk )
{
    /// connection closing
    theClient->DisconnectRequest(DR_IO_REQUEST_ERROR);
}

// 그래서 completionOk == false 인 경우에는 DisconnectRequest 함수를 추가적으로 호출하는데
// 이 내부구조에는 TF_REUSE_SOCKET 을 옵션으로 준 DisconnectEx 를 호출하도록 구성돼있다
// 요약하면 생긴건 정말 연결을 끊어버리게 생겼지만, 실제로는
// socket 을 다시 사용할 수 있도록 반납하는 정도로 동작한다는 것이다
// 이걸 알아내려고 며칠 머리썩힌 난 정말 멍청하다

DeleteIoContext(context);

// 물론 다 쓴 OverlappedIOContext 는 뒷정리를 해주자


/*------------------------ 180401 ------------------------*/

case IO_RECV_ZERO:
    completionOk = PreReceiveCompletion(theClient, static_cast<OverlappedPreRecvContext*>(context), dwTransferred);
    break;

// 이 부분 이해를 완전히 잘못했다
// PreReceiveCompletion 의 결과에 따라 에러난 경우에는 completionOk 가 false 가 되는거였어
// completionOk == false 인 경우는 DisconnectRequest 를 해주고
// 반대의 경우에는 context 만 지워주는 걸로

bool IocpManager::ReceiveCompletion(ClientSession* client, OverlappedRecvContext* context, DWORD dwTransferred)
{
	client->RecvCompletion(dwTransferred);

	/// echo back
	return client->PostSend();
}

// 각 패킷 타입에 대한 completion 처리 함수를 만들어보자
// iocp manager 에서는 overlapped io context 를 통해 들어온 client session 객체의
// send/recv 함수를 호출한다
// 그리고 호출된 send/recv 함수는 일을 하고 결과를 리턴하며
// 리턴된 결과는 다시 iocp manager 로 돌아온다
// 그리고 completion 을 수정해서 delete io context 만 할지, disconnection request 를 할지
// 선택을 하겠지

// CircularBuffer 에 대한 고찰
// 65535 사이즈의 원형 버퍼를 생성하고, 소켓이 들고오는 데이터를 적당히 나눈 원형 버퍼에 담았다가
// 사용하고 지우고 하는걸 하려는 모양인데.
// 그냥 512 정도의 사이즈로 RecvCompletion 을 진행하는 동안 잠깐 사용하고
// 해제하고 하면 조금 낭비려나? 그래도 내가 완벽하게 이해하고 설명할 수 있는 코드라는 점에서
// 당장은 이렇게 하는게 좋을 것 같다
// 최선은 당연히 원형버퍼 코드를 이해하고 설명할 수 있어야 하는 것

/*------------------------ 180402 ------------------------*/

bool acceptexRetVal = GIocpmanager->AcceptEx(GIocpmanager->GetListenSock(), clientSock, GIocpmanager->acceptBuffer,
    0, sizeof(SOCKADDR_IN) + 16, sizeof(SOCKADDR_IN) + 16, &bytes, (LPOVERLAPPED)acceptContext);

// sizeof(SOCKADDR_IN)+16 이 부분은 listen 을 통해 받을만큼의 backlog 수 만큼 AcceptEx 를 생성하는 과정이라고 한다
// 

/*------------------------ 180410 ------------------------*/
// IOCPManager 의 StartAcceptLoop 부분에서 계속 SessionManager::AcceptSession 이 루프 도는걸 해결해보자
// 1개의 접속요청에 대해 3번의 접속허가를 하는 현상도 해결해보자

/*------------------------ 180415 ------------------------*/
int retval = GetQueuedCompletionStatus(hCompletionPort, &dwReceivedByte, (PULONG_PTR)&completionKey, (LPOVERLAPPED*)&context, INFINITE);
ClientSession* client = context ? context->owner : nullptr;
// 대체 여기서 client 가 nullptr 로 들어가는 이유가 뭘까?
// GSP 예제코드로 돌리면 문제가 없는데 내 코드에서만 이러는걸 보니 어딘가 문제가 분명히 있다.

struct OverlappedIOContext
{
	OverlappedIOContext(ClientSession* owner, PACKET_TYPE ptype);

	OVERLAPPED		ovl;
	ClientSession*	owner;
	PACKET_TYPE		type;
	WSABUF			wsaBuf; // 이하의 structs 들을 담을 배열이 있는 구조체
};

// Overlapped 구조체를 포함한 임의의 Overlapped 구조체를 구성하는 경우, 항상 구조체의 제일 최선에는
// Overlapped 구조체가 있어야한다고...


/*------------------------ 180415 ------------------------*/

ObjectCreateContext* occ = new ObjectCreateContext();
occ->objectid = 111;
occ->userid = 222;
occ->xpos = 333.333;
occ->ypos = 444.444;

OverlappedIOContext* ocovl = new OverlappedIOContext(nullptr, PACKET_TYPE::OBJECT_CREATE);
ocovl->wsaBuf.len = sizeof(ObjectCreateContext);
ocovl->wsaBuf.buf = new char[ocovl->wsaBuf.len];
CopyMemory(ocovl->wsaBuf.buf, occ, sizeof(ObjectCreateContext));

if (SOCKET_ERROR == WSASend(listenSocket, &ocovl->wsaBuf, 1, (LPDWORD)&dwBytes, 0, (LPWSAOVERLAPPED)ocovl, NULL))
{
    if (WSAGetLastError() != WSA_IO_PENDING)
    {
        std::cout << "[ERROR] WSASend failed, error code ";
        ErrorMsg(GetLastError());
        std::cout << std::endl;
    }
}

// Overlapped 구조체를 새로이 정의했다면 WSASend 로 구조체를 보낼 때 매개변수중 LPWSAOVERLAPPED 에는
// 멀쩡히 해당 구조체를 넣어주자
// 괜히 ocovl->ovl 이러면서 고생하지 말자

// Accept 를 하면서 IOCP Queue 에 빈 IO 작업을 하나 넣어줄 필요가 있다고 한다
// 그래야 다음에 WSARecv 를 할 때 클라이언트에서 받아온 내용을 꺼내오고, 새로운 빈 껍데기 IO 를
// IOCP Queue 에 넣는다고 하는 모양

HANDLE hClientIOCP = CreateIoCompletionPort((HANDLE)clientSock, GIocpmanager->GetIOCPHandle(), (ULONG_PTR)this, 0);
if (hClientIOCP != GIocpmanager->GetIOCPHandle())
{
    std::cout << "[ERROR] CreateIoCompletionPort failed, "; ErrorMsg(GetLastError()); std::cout << " (" << GetLastError() << ")" << std::endl;
    result = false;
    break;
}

// 여기서 왜 GLE 가 87 이 뜨는걸까?
// IOCP 핸들에 연결했던 socket 을 또 연결하려고 하는 경우에 발생하는 문제라는데,
// 여기서 하나의 의문은 왜 최대 10개의 클라이언트가 접속할 수 있게 설정해뒀는데
// 8개의 IOCP 스레드가 1개의 클라이언트 접속에 대해 10번의 IOCP 핸들 연결을 하는지 의문이다

bool ClientSession::InitializeRecv()
{
	OverlappedIOContext* init = new OverlappedIOContext(this, PACKET_TYPE::IO_DUMMY);
	init->wsaBuf.buf = nullptr;
	init->wsaBuf.len = 0;

	DWORD dwBytes = 0;
	DWORD dwFlags = 0;

	if (SOCKET_ERROR == WSARecv(clientSock, &init->wsaBuf, 1, &dwBytes, (LPDWORD)&dwFlags, (LPWSAOVERLAPPED)init, NULL))
	{
		if (WSAGetLastError() != WSA_IO_PENDING)
		{
			std::cout << "[ERROR] InitializeRecv failed, "; ErrorMsg(GetLastError()); std::cout << " (" << GetLastError() << ")" << std::endl;
			return false;
		}
	}

	return true;
}

// Accept 를 한 후 IOCP Queue 에 더미 IO 를 넣어주는 작업에서 패킷 타입을 CONNECT_ACCEPT 로 잡았더니
// 이 IO 에 대해서 한번 더 GQCS 가 실행되는 대 참사가 일어난 것이었다
// 그래서 zero-recv 를 위한 IO_DUMMY 를 넣어두었고, 이제 이에 대한 RECV 를 처리해야 한다
// 여기서 생기는 의문은 아래의 루프를 어떻게 내 패킷 구조에 맞게 나눌것이냐는거다

// 내가 생각하는 문제의 루프
// 1. 클라이언트가 connect 를 하고, 그 결과 gqcs 가 작업을 큐에서 꺼내 connect_accept 에 대한 작업을 한다
// 2. conenct_accept 를 처리하는 과정에서 io_dummy 를 큐에 넣어둔다
// 3. io_dummy 에 gqcs 가 반응해서 꺼내오고, 그거에 대한 처리(미구현)를 한다
// 4. io_dummy 에 대한 처리를 하면서, 가령 모든 object 패킷을 미리 넣어둔다고 해보자
// 5. 그럼 넣어둔 object 작업에 대해 또 gqcs 의 반응과 패킷을 꺼내고 넣는 작업을 반복할것이다
// 6. 시발?

// 패킷 구조를 재구성?
// OverlappedIOContext
// ConnectionIOContext : OverlappedIOContext 를 상속받은 Connection 전용
// ObjectIOContext : OverlappedIOContext 를 상속받은 Object 전용

// 한가지 중대한 문제점
// accept -> gqcs pop accept io -> processing accept io, push dummy io
// -> gqcs pop dummy io -> processing dummy io, push ALL THE STRUCT IO?